---
import { getLanguageAlternatives, getPathWithoutLang } from '@/utils/i18n';

export interface Props {
  currentLang: string;
  currentPath?: string;
}

const { currentLang, currentPath } = Astro.props;
const pathWithoutLang = currentPath ? getPathWithoutLang(currentPath) : getPathWithoutLang(Astro.url.pathname);
const alternatives = getLanguageAlternatives(pathWithoutLang);

// Encontrar el idioma actual para mostrar su label
const currentLanguage = alternatives.find(alt => alt.lang === currentLang);
const displayLabel = currentLanguage?.label || currentLang.toUpperCase();
---

<div class="relative inline-block">
  <button
    type="button"
    class="bg-white cursor-pointer duration-200 font-display hover:bg-black hover:text-white hover:border-white border border-transparent px-6 py-4 sm:rounded-full text-black text-center text-xs uppercase inline-flex items-center justify-center gap-2"
    id="language-menu-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="lang-text">{displayLabel}</span>
    <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    class="absolute right-0 z-50 mt-2 w-32 origin-top-right sm:rounded-full bg-black border border-white/20 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden overflow-hidden"
    id="language-menu"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {alternatives.map((alt) => (
        <a
          href={alt.path}
          class={`block px-6 py-3 text-xs font-display uppercase hover:bg-white hover:text-black transition-colors duration-200 ${
            alt.lang === currentLang 
              ? 'text-orange bg-white/10' 
              : 'text-white hover:text-black'
          }`}
          role="menuitem"
          tabindex="-1"
        >
          {alt.label}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  // Configuración de idiomas
  const languageConfig = {
    'es': { label: 'ES', path: '' },
    'de': { label: 'DE', path: '/de' },
    'en': { label: 'EN', path: '/en' },
    'fr': { label: 'FR', path: '/fr' },
    'ru': { label: 'RU', path: '/ru' }
  };

  // Función para detectar el idioma actual desde la URL
  function getCurrentLanguageFromURL() {
    const path = window.location.pathname;
    if (path.startsWith('/en')) return 'en';
    if (path.startsWith('/de')) return 'de';
    if (path.startsWith('/fr')) return 'fr';
    if (path.startsWith('/ru')) return 'ru';
    return 'es'; // español por defecto
  }

  // Función para actualizar el texto del botón
  function updateButtonText() {
    const currentLang = getCurrentLanguageFromURL();
    const button = document.getElementById('language-menu-button');
    const buttonText = button?.querySelector('.lang-text');
    
    if (buttonText) {
      buttonText.textContent = languageConfig[currentLang].label;
    }
  }

  // Actualizar el texto del botón cuando se carga la página
  document.addEventListener('DOMContentLoaded', updateButtonText);
  
  // Actualizar cuando cambia la URL (para navegación SPA)
  window.addEventListener('popstate', updateButtonText);

  // Toggle language menu
  const button = document.getElementById('language-menu-button');
  const menu = document.getElementById('language-menu');
  
  button?.addEventListener('click', (e) => {
    e.preventDefault();
    const isHidden = menu?.classList.contains('hidden');
    if (isHidden) {
      menu?.classList.remove('hidden');
      button?.setAttribute('aria-expanded', 'true');
    } else {
      menu?.classList.add('hidden');
      button?.setAttribute('aria-expanded', 'false');
    }
  });
  
  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    if (!button?.contains(event.target as Node) && !menu?.contains(event.target as Node)) {
      menu?.classList.add('hidden');
      button?.setAttribute('aria-expanded', 'false');
    }
  });
  
  // Close menu on escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      menu?.classList.add('hidden');
      button?.setAttribute('aria-expanded', 'false');
    }
  });
</script>
