---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { languages, t } from '@/utils/i18n';
import { sendFeedback, validateFeedbackData, sanitizeFeedbackData } from "@/utils/api";
import type { FeedbackFormData } from "@/types/forms";

export const prerender = false;

export async function getStaticPaths() {
  return languages.map(lang => ({ 
    params: { lang } 
  }));
}

const { lang } = Astro.params;

// Handle form submission
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const formData: Partial<FeedbackFormData> = {
            email: data.get("email") as string,
            message: data.get("message") as string,
            appPlatform: 'web',
        };

        // Validate and sanitize data
        const validation = validateFeedbackData(formData);
        
        if (validation.isValid) {
            const sanitizedData = sanitizeFeedbackData(formData);
            
            // Send to your API
            const result = await sendFeedback(sanitizedData);
            
            if (result.success) {
                return Astro.redirect(`/${lang}`);
            } else {
                console.error("API Error:", result.error);
            }
        } else {
            console.error("Validation errors:", validation.errors);
        }
    } catch (error) {
        console.error("Error submitting feedback:", error);
    }
}

const feedback = t(lang, 'feedback');
---

<BaseLayout title={`${feedback.title} | Hoergen`} lang={lang}>
    <main class="min-h-screen bg-black">
        <div class="mx-auto border-white/20 border-x max-w-7xl min-h-screen">
            <div class="px-8 py-16 lg:py-24">
                <div class="max-w-2xl mx-auto">
                    <div class="mb-12 text-center">
                        <h1 class="text-white font-display uppercase text-3xl lg:text-5xl mb-4">
                            {feedback.title}
                        </h1>
                        <p class="text-eagle text-lg">
                            {feedback.subtitle}
                        </p>
                    </div>

                    <form 
                        method="POST"
                        class="space-y-6"
                        id="feedback-form"
                    >
                            <!-- Email Field -->
                            <div>
                                <label for="email" class="block text-white font-medium mb-2">
                                    {feedback.form.email} <span class="text-orange">*</span>
                                </label>
                                <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    required
                                    class="w-full px-4 py-3 bg-black border border-white/20 text-white placeholder-eagle focus:border-orange focus:outline-none transition-colors duration-200"
                                    placeholder={feedback.form.emailPlaceholder}
                                />
                            </div>

                            <!-- Message Field -->
                            <div>
                                <label for="message" class="block text-white font-medium mb-2">
                                    {feedback.form.message} <span class="text-orange">*</span>
                                </label>
                                <textarea
                                    id="message"
                                    name="message"
                                    required
                                    rows="6"
                                    class="w-full px-4 py-3 bg-black border border-white/20 text-white placeholder-eagle focus:border-orange focus:outline-none transition-colors duration-200 resize-vertical"
                                    placeholder={feedback.form.messagePlaceholder}
                                ></textarea>
                            </div>

                            <!-- Submit Button -->
                            <div class="flex gap-4">
                                <button
                                    type="submit"
                                    class="flex-1 bg-orange text-black font-medium py-3 px-6 hover:bg-orange/90 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                                    id="submit-btn"
                                >
                                    <span id="submit-text">{feedback.form.submit}</span>
                                    <span id="submit-loading" class="hidden">{feedback.form.submitting}</span>
                                </button>
                                <a
                                    href={`/${lang}`}
                                    class="px-6 py-3 border border-white/20 text-white hover:bg-white hover:text-black transition-colors duration-200 text-center"
                                >
                                    {feedback.form.cancel}
                                </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>
</BaseLayout>

<script>
    // Simple form handling with loading state only
    const form = document.getElementById('feedback-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLSpanElement;
    const submitLoading = document.getElementById('submit-loading') as HTMLSpanElement;

    if (form) {
        form.addEventListener('submit', () => {
            // Show loading state and let the form submit naturally
            submitBtn.disabled = true;
            submitText.classList.add('hidden');
            submitLoading.classList.remove('hidden');
        });
    }
</script>

<style>
    /* Custom styles for form elements */
    input[type="email"],
    textarea {
        background-color: transparent;
    }

    /* Focus ring for accessibility */
    input:focus,
    textarea:focus {
        box-shadow: 0 0 0 2px rgba(38, 224, 86, 0.2);
    }
</style>
