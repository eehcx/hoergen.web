---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { languages, t } from '@/utils/i18n';

// Remove SSR for Firebase Hosting
export async function getStaticPaths() {
  return languages.map(lang => ({ 
    params: { lang } 
  }));
}

const { lang } = Astro.params;
const feedback = t(lang, 'feedback');
---

<BaseLayout title={`${feedback.title} | Hoergen`} lang={lang}>
    <main class="min-h-screen bg-black">
        <div class="mx-auto border-white/20 border-x max-w-7xl min-h-screen">
            <div class="px-8 py-16 lg:py-24">
                <div class="max-w-2xl mx-auto">
                    <div class="mb-12 text-center">
                        <h1 class="text-white font-display uppercase text-3xl lg:text-5xl mb-4">
                            {feedback.title}
                        </h1>
                        <p class="text-eagle text-lg">
                            {feedback.subtitle}
                        </p>
                    </div>

                    <form 
                        class="space-y-6"
                        id="feedback-form"
                    >
                        <!-- Email Field -->
                        <div>
                            <label for="email" class="block text-white font-medium mb-2">
                                {feedback.form.email} <span class="text-orange">*</span>
                            </label>
                            <input
                                type="email"
                                id="email"
                                name="email"
                                required
                                class="w-full px-4 py-3 bg-black border border-white/20 text-white placeholder-eagle focus:border-orange focus:outline-none transition-colors duration-200"
                                placeholder={feedback.form.emailPlaceholder}
                            />
                        </div>

                        <!-- Message Field -->
                        <div>
                            <label for="message" class="block text-white font-medium mb-2">
                                {feedback.form.message} <span class="text-orange">*</span>
                            </label>
                            <textarea
                                id="message"
                                name="message"
                                required
                                rows="6"
                                class="w-full px-4 py-3 bg-black border border-white/20 text-white placeholder-eagle focus:border-orange focus:outline-none transition-colors duration-200 resize-vertical"
                                placeholder={feedback.form.messagePlaceholder}
                            ></textarea>
                        </div>

                        <!-- Submit Button -->
                        <div class="flex gap-4">
                            <button
                                type="submit"
                                class="flex-1 bg-orange text-black font-medium py-3 px-6 hover:bg-orange/90 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                                id="submit-btn"
                            >
                                <span id="submit-text">{feedback.form.submit}</span>
                                <span id="submit-loading" class="hidden">{feedback.form.sending}</span>
                            </button>
                            <a
                                href={`/${lang}`}
                                class="px-6 py-3 border border-white/20 text-white hover:bg-white hover:text-black transition-colors duration-200 text-center"
                            >
                                {feedback.form.cancel}
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>
</BaseLayout>

<script define:vars={{ lang }}>
    // Client-side form handling - no SSR needed for Firebase Hosting
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('feedback-form');
        const submitBtn = document.getElementById('submit-btn');
        const submitText = document.getElementById('submit-text');
        const submitLoading = document.getElementById('submit-loading');

        if (form && submitBtn && submitText && submitLoading) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Show loading state
                submitBtn.disabled = true;
                submitText.classList.add('hidden');
                submitLoading.classList.remove('hidden');

                try {
                    // Get form data
                    const formData = new FormData(form);
                    const data = {
                        email: formData.get('email'),
                        message: formData.get('message'),
                        appPlatform: 'web'
                    };

                    console.log('üì° Sending feedback directly to API:', data);

                    // Send directly to your API - no SSR needed
                    const response = await fetch('https://nestjs-kzphduejga-uc.a.run.app/v2/feedback', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        console.log('üéâ Feedback sent successfully!');
                        // Redirect to home with language
                        window.location.href = `/${lang}`;
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                } catch (error) {
                    console.error('‚ùå Error sending feedback:', error);
                    alert('Error al enviar el feedback. Por favor intenta de nuevo.');
                    
                    // Reset form state
                    submitBtn.disabled = false;
                    submitText.classList.remove('hidden');
                    submitLoading.classList.add('hidden');
                }
            });
        }
    });
</script>

<style>
    /* Custom styles for form elements */
    input[type="email"],
    textarea {
        background-color: transparent;
    }

    /* Focus ring for accessibility */
    input:focus,
    textarea:focus {
        box-shadow: 0 0 0 2px rgba(38, 224, 86, 0.2);
    }
</style>
